---
title: "Copa Libertadores 2024"
format: 
  dashboard:
    orientation: columns
theme: 
  - darkly
  - copalibertadores2024.scss
logo: images/logo.png
---

```{r}
#| label: load-packages
#| message: false
#| warning: false
library(tidyverse)
library(gt)
library(gtExtras)
library(nanoparquet)
library(readxl)
library(worldfootballR)
library(htmltools)
library(quarto)
library(fontawesome)
library(glue)
library(RColorBrewer)
library(reactable)
library(reactablefmtr)
```


```{r}
#| label: parameters
#| message: false
#| warning: false

colores <- RColorBrewer::brewer.pal(9,"Set1")

# Tema de las tablas reactable

theme_reactable <- reactable::reactableTheme(
  backgroundColor = "#303030",
  color = "white",
  style = list(fontFamily = "Source Sans 3", # Fuente de Google Fonts
               fontWeight = "400"  # Peso de la fuente)
  ))

reactable_table <- function(data,...) {
  reactable::reactable(
    data,
    theme = theme_reactable,
    fullWidth = FALSE,
    outlined = TRUE,
    defaultColDef = colDef(
        headerStyle = list(
        borderBottom = "2px solid #FFFFFF"
        ,textAlign = "center"
        ),
        align = "center"
      ),
    defaultPageSize = 10,
    ...
  )
}
```



```{r}
#| label: load-data
#| message: false
#| warning: false

# Data FBREF Jugadores
folder.parquet <- list.files("data", pattern = "^player.*\\.parquet$", full.names = TRUE)
parquet.files <- lapply(folder.parquet, read_parquet)
names(parquet.files) <- str_split_i(str_split_i(folder.parquet,"player_",2),"\\.",1)

# Data FBREF Partidos (No contiene los datos de los partidos prelibertadores..) -> se usa player.summary
# match.results <- read_parquet("data/match_results.parquet")

# Data logos
logo.lib2024 <- read_csv("data/logo_libertadores2024.csv")

# Mapping logos
map.lib2024 <- read_excel("data/map_logo2024.xlsx")

# FBref - logo
fbref.logo2024 <- inner_join(logo.lib2024, map.lib2024, by = c("Nombre" = "NAME_LOGO"))

```


```{r}
#| label: player-filter-transforming-data
#| message: false
#| warning: false


# Summary Jugadores
player.summary <- parquet.files$summary |> 
  # Filtramos partidos previos a fase de grupos
  # filter(Match_Date > "2024-03-15") |> 
  # Partidos Jugados por el equipo del jugador
  group_by(Team) |> 
  mutate(Total_Partidos_Jugados_Equipo = n_distinct(Game_URL)) |> 
  # No se consideran alargues
  mutate(Total_Minutos_Jugados_Equipo = 90*Total_Partidos_Jugados_Equipo) |> 
  ungroup() |> 
  # Total minutos jugados por jugador y tiempo promedio por partido
  group_by(Player) |> 
  mutate(Total_Minutos = sum(Min)) |> 
  mutate(Total_Partidos_Jugados_Jugador = n_distinct(Game_URL)) |> 
  mutate(Promedio_Minutos_x_PartidoJugado = 90 * (Total_Minutos/(Total_Minutos_Jugados_Equipo))) |>
  mutate(Ind_Prom_Mas_30min_x_Partido = ifelse(Promedio_Minutos_x_PartidoJugado >= 30, 1, 0)) |> 
  ungroup() |> 
  # URL logo
  left_join(fbref.logo2024, by = c("Team" = "Name_FBREF"))


# Ultimo equipo que jugo de cada jugador

last.team.player <- 
  player.summary |> 
  group_by(Player) |> 
  filter(Match_Date == max(Match_Date)) |> 
  select(Player, LastTeam = Team)

# Goleadores
df.goleadores <- player.summary |> 
  group_by(Player) |> 
  summarise(Total_Goles = sum(Gls),
            Total_Asistencias = sum(Ast),
            Total_GA = sum(Gls)+sum(Ast),
            Total_Tiros = sum(Sh),
            Total_Tiros_a_Puerta = sum(SoT),
            Total_XG = sum(xG_Expected,na.rm = T),
            Total_Amarillas = sum(CrdY),
            Total_Rojas = sum(CrdR)) |> 
  mutate(Ratio_G_XG = round(Total_Goles / Total_XG,2)) |>
  mutate(Ratio_G_XG = ifelse(is.infinite(Ratio_G_XG),1,Ratio_G_XG)) |> 
  # Añadimos ultimo equipo en que jugo
  left_join(last.team.player, by = "Player") |> 
  # Logo equipo
  left_join(fbref.logo2024, by = c("LastTeam" = "Name_FBREF")) |> 
  # cambiamos posicion y eliminamos columnas
  select(-Nombre) |> 
  # Columna de ranking de Goleadores - Asistencias
  mutate(Posicion_Goleador = dense_rank(desc(Total_Goles)),
         Posicion_Asistidor = dense_rank(desc(Total_Asistencias)),
         Player_Team_DP = glue("{Player} ( {LastTeam} )")) |>
  relocate(Player_Team_DP) |>
  relocate(url) |>
  relocate(LastTeam, .after = Player) |> 
  arrange(Posicion_Goleador,Posicion_Asistidor) |> 
  ungroup()


```


```{r}
#| label: match-filter-transforming-data
#| message: false
#| warning: false

## Solo si se usa el parquet de partidos que contiene de fase de grupos en adelante
## Limpieza de nombres de equipos (sigla pais)
# match.results <- match.results |> 
#   mutate(Home = str_sub(Home,1,nchar(Home)-2)) |> 
#   mutate(Away = str_sub(Away,3,nchar(Away))) |>
#   mutate(across(c(Home,Away),trimws))

# Seleccionamos columnas de partido y datos unicos

match.results <- player.summary |> 
  select(Match_Date,Matchweek,Home_Team, Home_Score, Home_xG, Away_Team, Away_Score, Away_xG) |> 
  distinct_all()

# Funcion Victoria Derrotas

f.result <- function(goals_1, goals_2) {
  
  home.win <- ifelse(goals_1 > goals_2, 1, 0)
  draw <- ifelse(goals_1 == goals_2, 1, 0)
  away.win <- ifelse(goals_1 < goals_2, 1, 0)
  
  results <- list(
    "Local_Victoria" = home.win,
    "Empate" = draw,
    "Visita_Victoria" = away.win
  )
  return(results)
  
}

# Aplicamos funcion a resultados de partidos

match.results.final <- match.results |>
  mutate(resfinal = map2(Home_Score, Away_Score, ~f.result(.x, .y))) |> 
  unnest_wider(resfinal)
  
# Resultados de local

match.results.local <- 
  match.results.final |> 
  group_by(Home_Team) |> 
  summarise(across(c(Home_Score,Home_xG,Local_Victoria,Empate,Away_Score), sum, na.rm = TRUE),
            Partidos_Jugados_Local = n(), .groups = "drop") |> 
  rename(Goles_Recibidos_de_Local = Away_Score)

# Resultados de visita

match.results.visita <- 
  match.results.final |> 
  group_by(Away_Team) |> 
  summarise(across(c(Away_Score,Away_xG,Visita_Victoria,Empate,Home_Score), sum, na.rm = TRUE),
            Partidos_Jugados_Visita = n(), .groups = "drop") |> 
  rename(Goles_Recibidos_de_Visita = Home_Score)
  
# Union

match.join.lv <- left_join(match.results.local, match.results.visita, by = c("Home_Team" = "Away_Team"))

# Otras transformaciones

match.join.lv2 <- match.join.lv |>
  group_by(Home_Team) |>
  mutate(
    Total_Goles = Home_Score + Away_Score,
    Total_XG = Home_xG + Away_xG,
    Total_Partidos = Partidos_Jugados_Local + Partidos_Jugados_Visita,
    Total_Victorias = Local_Victoria + Visita_Victoria,
    Total_Empates = Empate.x + Empate.y,
    Total_Goles_Recibidos = Goles_Recibidos_de_Local + Goles_Recibidos_de_Visita
  ) |>
  mutate(Total_Derrotas = Total_Partidos - (Total_Victorias + Total_Empates)) |>
  mutate(Diferencia_Gol = Total_Goles - Total_Goles_Recibidos) |> 
  rename(Empate_Local = Empate.x, Empate_Visita = Empate.y) |>
  # Porcentajes y partidos
  mutate(across(c(Total_Victorias,Total_Derrotas,Total_Empates),
         ~ paste0(round(100 * .x / Total_Partidos,0),"% ","(",.x,")"),
         .names = "{.col}_PCT")) |> 
  ungroup() |>
  # URL logo
  left_join(fbref.logo2024, by = c("Home_Team" = "Name_FBREF")) |>
  select(-Nombre) |>
  relocate(url, .before = Home_Team)
```



```{r}
#| label: function-transforming-data
#| message: false
#| warning: false



f.lider.equipo <- function(datos, equipo, tipo) {
  
  datos.por.equipo <- 
    datos |>
    # Por equipo
    group_by(LastTeam) |> 
    mutate(Goleador_Equipo = dense_rank(desc(Total_Goles)),
           Asistidor_Equipo = dense_rank(desc(Total_Asistencias))) |>
    filter(LastTeam == equipo) |> 
    ungroup()
    
    
  resultado <- 
    switch(tipo,
         "Goleador" = datos.por.equipo |> filter(Goleador_Equipo == 1) |> select(Player,Total_Goles),
         "Asistidor"= datos.por.equipo |> filter(Asistidor_Equipo == 1) |> select(Player,Total_Asistencias),
         stop("No_Existe"))
  
  colname.resultado <- colnames(resultado)[2]
  
  return(list(
    "datos" = resultado,
    "descripcion" = glue("{resultado$Player} ({resultado[[colname.resultado]]})")
  ))
  
}


```



```{r}
#| label: function-transforming-data-by-team
#| message: false
#| warning: false

# Equipos

equipos <- unique(fbref.logo2024$Name_FBREF)

# Columnas que calcularemos el maximo por equipo
cols.maximo <- c("Total_Goles","Total_Asistencias","Total_Amarillas","Total_Rojas")



maximo.equipo <- function(datos,equipo, columna, posicion = 1) {
  
  data.max.equipo <- datos |> 
    group_by(LastTeam) |>
    # Ordeno manera descendente por equipo
    mutate(orden_j = dense_rank(desc(!!sym(columna)))) |>
    # Filtro por equipo y primer lugar y los que tengan valor 0
    filter(LastTeam == equipo & orden_j == posicion) |>
    # Creo la columna de descripcion y añado metrica
    mutate(desc_max = paste0(Player, collapse = " - ")) |>
    # En caso de ser cero.. no tiene sentido poner los nombres
    mutate(desc_max = ifelse(!!sym(columna) == 0,"Sin datos para el equipo",desc_max)) |> 
    select(LastTeam, url, value = !!sym(columna), desc_max) |>
    # Como no hice summarise tengo que hacer un distinct
    distinct_all() |> 
    ungroup()
  
  return(data.max.equipo)
}
  
  

# Funcion por equipo
# Genera una lista con los datos maximos (goles, asist, etc) , asigna una columna con el tipo de metrica y luego lo une

proceso.equipo <- function(datos, nombre_equipo) {
  res <-  lapply(cols.maximo, function(col) {
    maximo.equipo(datos = datos, equipo = nombre_equipo , columna = col) |> 
      mutate(Metric = paste0("Metric_",col))
  })
  res <- bind_rows(res)
  return(res)
}

# Si lo aplicamos para todos los equipos
datos.equipos.v0 <- map_dfr(equipos, function(x) {
  proceso.equipo(df.goleadores, x)
})

# Formato wider
datos.equipos <- pivot_wider(datos.equipos.v0, names_from = Metric, values_from = c("value","desc_max"))
```


```{r, senddatatoOJS}
#| label: data-to-ojs
#| echo: false
#| include: false
ojs_define(match_agg_data = match.join.lv2)
ojs_define(res_equipo = datos.equipos)
```

```{ojs}
//| output: false
// Tranpose the data to  make it usable in ojs
match_agg_js = transpose(match_agg_data)
res_equipo_js = transpose(res_equipo)
```

# Resumen

## Column 1 {width="34%"}

::: {.card expandable="false"}

```{ojs}
// Filter data based on selection

Equipo_Campeon = "Botafogo (RJ)"
Equipo_Subcampeon = "Atlético Mineiro"

filter_campeon = res_equipo_js.filter(d => d.LastTeam === Equipo_Campeon)
filter_subcampeon = res_equipo_js.filter(d => d.LastTeam === Equipo_Subcampeon)

// Tarjeta condicional

// Tarjeta Campeon

html`${filter_campeon.map(d =>
`    <div class="container-fluid py-2qua">
        <div class="card shadow">
            <div class="card-header text-white">
                <div class="d-flex align-items-center">
                  <div class = "icon-div">
                    <i class="fa fa-trophy champion-icon" aria-hidden="true"></i>
                    <p>1º</p>
                  </div>
                    <img src="${d.url}?height=60&width=60" alt="Team Logo" class="team-logo me-3">
                    <div class="flex-grow-1 overflow-hidden">
                        <h2 class="mb-0 team-name">${d.LastTeam}</h2>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">⚽</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Goleador(es)</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Goles}</p>
                            <small class="text-muted">${d.value_Metric_Total_Goles} Goles</small>
                        </div>
                    </div>
                </div>
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">👟</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Máximo Asistidor</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Asistencias}</p>
                            <small class="text-muted">${d.value_Metric_Total_Asistencias} Asistencias</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>`)}`
```


```{ojs}

// Tarjeta SUBCampeon

html`${filter_subcampeon.map(d =>
`    <div class="container-fluid py-2">
        <div class="card shadow">
            <div class="card-header text-white">
                <div class="d-flex align-items-center">
                  <div class = "icon-div">
                    <i class="fa-solid fa-medal second-icon"></i>
                    <p>2º</p>
                  </div>
                    <img src="${d.url}?height=60&width=60" alt="Team Logo" class="team-logo me-3">
                    <div class="flex-grow-1 overflow-hidden">
                        <h2 class="mb-0 team-name">${d.LastTeam}</h2>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">⚽</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Goleador(es)</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Goles}</p>
                            <small class="text-muted">${d.value_Metric_Total_Goles} Goles</small>
                        </div>
                    </div>
                </div>
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">👟</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Máximo Asistidor</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Asistencias}</p>
                            <small class="text-muted">${d.value_Metric_Total_Asistencias} Asistencias</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>`)}`
```

:::

## Column 2 {.tabset width="66%"}

```{r}
#| label: Tabla-Goleadores
#| title: "Goleadores"

df.goleadores |>
  # Primeros 10
  arrange(desc(Total_Goles),desc(Total_Asistencias),desc(Total_Tiros),desc(Total_Tiros_a_Puerta)) |> 
  slice(1:10) |> 
  select(-Player_Team_DP,-Posicion_Asistidor, -Total_Amarillas, -Total_Rojas) |>
  mutate(color_xg = "") |> 
  gt(
     groupname_col = "Posicion_Goleador" , 
     row_group_as_column = TRUE) |>
  # Formato color
   tab_style(
    style = list(
      cell_fill(color = colores[1])
    ),
    locations = cells_body(
      columns = color_xg,
      rows = Ratio_G_XG < 1
    )
  ) |>
    # Formato color
   tab_style(
    style = list(
      cell_fill(color = colores[3])
    ),
    locations = cells_body(
      columns = color_xg,
      rows = Ratio_G_XG >= 1
    )
  ) |> 
  # Nombre Columnas
  cols_label(url ~ "",
             Player ~ "Jugador",
             LastTeam ~ "Equipo",
             Total_Goles ~ "Goles",
             Total_Asistencias ~ "Asistencias",
             Total_GA ~ "G+A",
             Total_Tiros ~ "Tiros",
             Total_Tiros_a_Puerta ~ "Tiros al arco",
             Total_XG ~ "xG",
             Ratio_G_XG ~ "Goles/xG",
             color_xg ~ ""
             ) |>
  # Logo
    text_transform(
      locations = cells_body(columns = url),
      fn = function(x) {
        web_image(url = x, height = 30)
      }) |> 
  tab_options(
    table.width = pct(90)
  ) |> 
  gt_theme_dark()

# 
# |>
#   # Logo Equipo
#     text_transform(
#       locations = cells_body(columns = url),
#       fn = function(x) {
#         web_image(url = x, height = 30)
#       }) |> 
  
```

```{r}
#| label: Tabla-Asistidores
#| title: "Asistencias"

df.goleadores |>
  # TOP 10
  # Primeros 10
  arrange(desc(Total_Asistencias),desc(Total_Goles)) |> 
  slice(1:10) |> 
  select(url,Player,LastTeam,Total_Asistencias,Total_Goles,Total_GA,Posicion_Asistidor) |> 
  arrange(Posicion_Asistidor) |> 
  gt(
     groupname_col = "Posicion_Asistidor" , 
     row_group_as_column = TRUE) |>
  # Nombre Columnas
  cols_label(url ~ "",
             Player ~ "Jugador",
             LastTeam ~ "Equipo",
             Total_Asistencias ~ "Asistencias",
             Total_Goles ~ "Goles",
             Total_GA ~ "G+A",
             ) |>
  # Logo
    text_transform(
      locations = cells_body(columns = url),
      fn = function(x) {
        web_image(url = x, height = 30)
      }) |> 
  tab_options(
    table.width = pct(90)
  ) |> 
  gt_theme_dark()

  
```



# Equipos

## Column - Resumen Equipos {width=48%}


```{r, reactableTable}
#| title: "Resumen Equipos"

filterExactMatch <- JS("(rows, columnId, filterValue) => {
  return rows.filter(row => row.values[columnId] == filterValue)
}")

# Filtro por equipo en desuso
            # ,columns = list(
            #   Home_Team = colDef(
            #     filterMethod = filterExactMatch
            #   )
            # ),
            # elementId = "tbl"



# Filtro de equipo
match.join.lv2 |>
  select(url,
         Home_Team,
         Total_Partidos,
         Total_Victorias,
         Total_Empates,
         Total_Derrotas,
         Total_Goles,
         Total_Goles_Recibidos,
         Diferencia_Gol) |>
  reactable_table(
    columns = list(
      # Otras Columnas
      url = colDef(
        name = "",
        maxWidth = 40,
        sortable = FALSE,
        # render team logos from their image address
        style = background_img()
      ),
      Home_Team = colDef(name = "EQUIPO", minWidth = 140),
      Total_Partidos = colDef(name = "PJ", minWidth = 50),
      Total_Victorias = colDef(name = "G", minWidth = 50),
      Total_Empates = colDef(name = "E"), minWidth = 50,
      Total_Derrotas = colDef(name = "D", minWidth = 50),
      Total_Goles = colDef(name = "GF", minWidth = 50),
      Total_Goles_Recibidos = colDef(name = "GC", minWidth = 50),
      Diferencia_Gol = colDef(name = "DG", minWidth = 50)
    ),
    defaultSorted = list(Home_Team = "asc")
  )
  
  
  
  
  
  

```

## Column - Por Equipo {width=52%}

::: {.card title = "Información por Equipo"}

```{ojs}
// Este es el filtro de opciones de equipos
viewof Equipos = Inputs.select(
  match_agg_js.map(d => d.Home_Team),
  {
    label : "Equipos",
    unique : true
}
)

```



```{ojs}
//| height: 90%


// Filter data based on selection
filtered = res_equipo_js.filter(d => d.LastTeam === Equipos)

// Tarjeta condicional


// Tarjeta

html`${filtered.map(d =>
`    <div class="container-fluid py-4">
        <div class="card shadow">
            <div class="card-header text-white">
                <div class="d-flex align-items-center">
                    <img src="${d.url}?height=60&width=60" alt="Team Logo" class="team-logo me-3">
                    <div class="flex-grow-1 overflow-hidden">
                        <h2 class="mb-0 team-name">${d.LastTeam}</h2>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">⚽</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Goleador(es)</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Goles}</p>
                            <small class="text-muted">${d.value_Metric_Total_Goles} Goles</small>
                        </div>
                    </div>
                </div>
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">👟</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Máximo Asistidor</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Asistencias}</p>
                            <small class="text-muted">${d.value_Metric_Total_Asistencias} Asistencias</small>
                        </div>
                    </div>
                </div>
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">🟨</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Más Amarillas</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Amarillas}</p>
                            <small class="text-muted">${d.value_Metric_Total_Amarillas} Tarjetas</small>
                        </div>
                    </div>
                </div>
                <div class="stat-section">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon me-3">🟥</div>
                        <div class="stat-content">
                            <h6 class="text-muted mb-0">Más Rojas</h6>
                            <p class="h5 mb-0 stat-name">${d.desc_max_Metric_Total_Rojas}</p>
                            <small class="text-muted">${d.value_Metric_Total_Rojas} Tarjetas</small>
                        </div>
                    </div>
                </div>
                <div class="stat-section">
                    <div class="d-flex justify-content-between text-muted flex-wrap">
                        <!-- Optional footer or additional content -->
                    </div>
                </div>
            </div>
        </div>
    </div>`)}`

```


:::