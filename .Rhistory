maxWidth = 30,
sortable = FALSE,
style = background_img())
)
)
match.join.lv2 <- match.join.lv |>
group_by(Home_Team) |>
mutate(Total_Goles = Home_Score + Away_Score,
Total_XG = Home_xG + Away_xG,
Total_Partidos = Partidos_Jugados_Local + Partidos_Jugados_Visita,
Total_Victorias = Local_Victoria + Visita_Victoria,
Total_Empates = Empate.x + Empate.y) |>
mutate(Total_Derrotas = Total_Partidos - (Total_Victorias+Total_Empates)) |>
rename(Empate_Local = Empate.x, Empate_Visita = Empate.y) |>
ungroup() |>
# URL logo
left_join(fbref.logo2024, by = c("Home_Team" = "Name_FBREF")) |>
select(-Nombre) |>
relocate(url, .before = Home_Team) |>
rename(url_foto = url)
glimpse(match.join.lv2)
# Filtro de equipo
match.join.lv2 |>
select(Home_Team,Total_Partidos,Total_Victorias,Total_Empates,Total_Derrotas) |>
reactable(theme = reactableTheme(backgroundColor = "#303030",
color = "white"),
bordered = TRUE,
columns = list(
url_foto = colDef(
name = "",
maxWidth = 30,
sortable = FALSE,
style = background_img())
)
)
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(Home_Team,Total_Partidos,Total_Victorias,Total_Empates,Total_Derrotas) |>
reactable(theme = reactableTheme(backgroundColor = "#303030",
color = "white"),
bordered = TRUE,
columns = list(
url = colDef(
name="",
maxWidth = 30,
sortable = FALSE,
style = background_img(.))
)
)
#| label: load-packages
#| message: false
#| warning: false
library(tidyverse)
library(gt)
library(gtExtras)
library(nanoparquet)
library(readxl)
library(worldfootballR)
library(htmltools)
library(quarto)
library(fontawesome)
library(glue)
library(RColorBrewer)
library(reactable)
library(reactablefmtr)
#| label: parameters
#| message: false
#| warning: false
colores <- RColorBrewer::brewer.pal(9,"Set1")
#| label: load-data
#| message: false
#| warning: false
# Data FBREF Jugadores
folder.parquet <- list.files("data", pattern = "^player.*\\.parquet$", full.names = TRUE)
parquet.files <- lapply(folder.parquet, read_parquet)
names(parquet.files) <- str_split_i(str_split_i(folder.parquet,"player_",2),"\\.",1)
# Data FBREF Partidos (No contiene los datos de los partidos prelibertadores..) -> se usa player.summary
# match.results <- read_parquet("data/match_results.parquet")
# Data logos
logo.lib2024 <- read_csv("data/logo_libertadores2024.csv")
# Mapping logos
map.lib2024 <- read_excel("data/map_logo2024.xlsx")
# FBref - logo
fbref.logo2024 <- inner_join(logo.lib2024, map.lib2024, by = c("Nombre" = "NAME_LOGO"))
#| label: player-filter-transforming-data
#| message: false
#| warning: false
# Summary Jugadores
player.summary <- parquet.files$summary |>
# Filtramos partidos previos a fase de grupos
# filter(Match_Date > "2024-03-15") |>
# Partidos Jugados por el equipo del jugador
group_by(Team) |>
mutate(Total_Partidos_Jugados_Equipo = n_distinct(Game_URL)) |>
# No se consideran alargues
mutate(Total_Minutos_Jugados_Equipo = 90*Total_Partidos_Jugados_Equipo) |>
ungroup() |>
# Total minutos jugados por jugador y tiempo promedio por partido
group_by(Player) |>
mutate(Total_Minutos = sum(Min)) |>
mutate(Total_Partidos_Jugados_Jugador = n_distinct(Game_URL)) |>
mutate(Promedio_Minutos_x_PartidoJugado = 90 * (Total_Minutos/(Total_Minutos_Jugados_Equipo))) |>
mutate(Ind_Prom_Mas_30min_x_Partido = ifelse(Promedio_Minutos_x_PartidoJugado >= 30, 1, 0)) |>
ungroup() |>
# URL logo
left_join(fbref.logo2024, by = c("Team" = "Name_FBREF"))
# Ultimo equipo que jugo de cada jugador
last.team.player <-
player.summary |>
group_by(Player) |>
filter(Match_Date == max(Match_Date)) |>
select(Player, LastTeam = Team)
# Goleadores
df.goleadores <- player.summary |>
group_by(Player) |>
summarise(Total_Goles = sum(Gls),
Total_Asistencias = sum(Ast),
Total_GA = sum(Gls)+sum(Ast),
Total_Tiros = sum(Sh),
Total_Tiros_a_Puerta = sum(SoT),
Total_XG = sum(xG_Expected)) |>
mutate(Ratio_G_XG = round(Total_Goles / Total_XG,2)) |>
# AÃ±adimos ultimo equipo en que jugo
left_join(last.team.player, by = "Player") |>
# Logo equipo
left_join(fbref.logo2024, by = c("LastTeam" = "Name_FBREF")) |>
# cambiamos posicion y eliminamos columnas
select(-Nombre) |>
# Columna de ranking de Goleadores - Asistencias
mutate(Posicion_Goleador = dense_rank(desc(Total_Goles)),
Posicion_Asistidor = dense_rank(desc(Total_Asistencias)),
Player_Team_DP = glue("{Player} ( {LastTeam} )")) |>
relocate(Player_Team_DP) |>
relocate(url) |>
relocate(LastTeam, .after = Player) |>
arrange(Posicion_Goleador) |>
ungroup()
#| label: match-filter-transforming-data
#| message: false
#| warning: false
## Solo si se usa el parquet de partidos que contiene de fase de grupos en adelante
## Limpieza de nombres de equipos (sigla pais)
# match.results <- match.results |>
#   mutate(Home = str_sub(Home,1,nchar(Home)-2)) |>
#   mutate(Away = str_sub(Away,3,nchar(Away))) |>
#   mutate(across(c(Home,Away),trimws))
# Seleccionamos columnas de partido y datos unicos
match.results <- player.summary |>
select(Match_Date,Matchweek,Home_Team, Home_Score, Home_xG, Away_Team, Away_Score, Away_xG) |>
distinct_all()
# Funcion Victoria Derrotas
f.result <- function(goals_1, goals_2) {
home.win <- ifelse(goals_1 > goals_2, 1, 0)
draw <- ifelse(goals_1 == goals_2, 1, 0)
away.win <- ifelse(goals_1 < goals_2, 1, 0)
results <- list(
"Local_Victoria" = home.win,
"Empate" = draw,
"Visita_Victoria" = away.win
)
return(results)
}
# Aplicamos funcion a resultados de partidos
match.results.final <- match.results |>
mutate(resfinal = map2(Home_Score, Away_Score, ~f.result(.x, .y))) |>
unnest_wider(resfinal)
# Resultados de local
match.results.local <-
match.results.final |>
group_by(Home_Team) |>
summarise(across(c(Home_Score,Home_xG,Local_Victoria,Empate), sum, na.rm = TRUE),
Partidos_Jugados_Local = n(), .groups = "drop")
# Resultados de visita
match.results.visita <-
match.results.final |>
group_by(Away_Team) |>
summarise(across(c(Away_Score,Away_xG,Visita_Victoria,Empate), sum, na.rm = TRUE),
Partidos_Jugados_Visita = n(), .groups = "drop")
# Union
match.join.lv <- left_join(match.results.local, match.results.visita, by = c("Home_Team" = "Away_Team"))
# Otras transformaciones
match.join.lv2 <- match.join.lv |>
group_by(Home_Team) |>
mutate(Total_Goles = Home_Score + Away_Score,
Total_XG = Home_xG + Away_xG,
Total_Partidos = Partidos_Jugados_Local + Partidos_Jugados_Visita,
Total_Victorias = Local_Victoria + Visita_Victoria,
Total_Empates = Empate.x + Empate.y) |>
mutate(Total_Derrotas = Total_Partidos - (Total_Victorias+Total_Empates)) |>
rename(Empate_Local = Empate.x, Empate_Visita = Empate.y) |>
ungroup() |>
# URL logo
left_join(fbref.logo2024, by = c("Home_Team" = "Name_FBREF")) |>
select(-Nombre) |>
relocate(url, .before = Home_Team)
#| label: function-transforming-data
#| message: false
#| warning: false
f.lider.equipo <- function(datos, equipo, tipo) {
datos.por.equipo <-
datos |>
# Por equipo
group_by(LastTeam) |>
mutate(Goleador_Equipo = dense_rank(desc(Total_Goles)),
Asistidor_Equipo = dense_rank(desc(Total_Asistencias))) |>
filter(LastTeam == equipo) |>
ungroup()
resultado <-
switch(tipo,
"Goleador" = datos.por.equipo |> filter(Goleador_Equipo == 1) |> select(Player,Total_Goles),
"Asistidor"= datos.por.equipo |> filter(Asistidor_Equipo == 1) |> select(Player,Total_Asistencias),
stop("No_Existe"))
colname.resultado <- colnames(resultado)[2]
return(list(
"datos" = resultado,
"descripcion" = glue("{resultado$Player} ({resultado[[colname.resultado]]})")
))
}
glimpse(match.join.lv2)
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(Home_Team,Total_Partidos,Total_Victorias,Total_Empates,Total_Derrotas) |>
reactable(theme = reactableTheme(backgroundColor = "#303030",
color = "white"),
bordered = TRUE,
columns = list(
url = colDef(
name="",
maxWidth = 30,
sortable = FALSE)
)
)
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(Home_Team,
Total_Partidos,
Total_Victorias,
Total_Empates,
Total_Derrotas) |>
reactable(
theme = reactableTheme(backgroundColor = "#303030", color = "white"),
bordered = TRUE,
columns = list(
url = colDef(
name = "",
maxWidth = 30,
sortable = FALSE,
# render team logos from their image address
style = background_img()
)
)
)
?background_img
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(url,
Home_Team,
Total_Partidos,
Total_Victorias,
Total_Empates,
Total_Derrotas) |>
reactable(
theme = reactableTheme(backgroundColor = "#303030", color = "white"),
bordered = TRUE,
columns = list(
url = colDef(
name = "",
maxWidth = 30,
sortable = FALSE,
# render team logos from their image address
style = background_img()
)
)
)
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(url,
Home_Team,
Total_Partidos,
Total_Victorias,
Total_Empates,
Total_Derrotas) |>
reactable(
theme = reactableTheme(backgroundColor = "#303030", color = "white"),
columns = list(
url = colDef(
name = "",
maxWidth = 40,
sortable = FALSE,
# render team logos from their image address
style = background_img()
),
Home_Team = colDef(
name = "Equipo"
),
Total_Partidos = colDef(
name = "PJ"
),
Total_Victorias = colDef(
name = "Victorias"
),
Total_Empates = colDef(
name = "Empates"
),
Total_Derrotas = colDef(
name = "Derrotas"
)
),
defaultSorted = list(Home_Team = "asc"),
defaultPageSize = 10
)
?reactableTheme
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(url,
Home_Team,
Total_Partidos,
Total_Victorias,
Total_Empates,
Total_Derrotas) |>
reactable(
theme = reactableTheme(backgroundColor = "#303030", color = "white",),
columns = list(
# Header
defaultColDef = colDef(
headerStyle = list(
backgroundColor = "#1E2A38",  # Header background color
color = "#E0E0E0",            # Softer white for text
fontWeight = "600",           # Semi-bold for modern style
borderBottom = "2px solid #FFFFFF", # Add bottom border
padding = "10px"              # Increase padding
)
),
# Otras Columnas
url = colDef(
name = "",
maxWidth = 40,
sortable = FALSE,
# render team logos from their image address
style = background_img(height = "90%", width = "90%")
),
Home_Team = colDef(
name = "Equipo"
),
Total_Partidos = colDef(
name = "PJ"
),
Total_Victorias = colDef(
name = "Victorias"
),
Total_Empates = colDef(
name = "Empates"
),
Total_Derrotas = colDef(
name = "Derrotas"
)
),
defaultSorted = list(Home_Team = "asc"),
defaultPageSize = 10
)
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(url,
Home_Team,
Total_Partidos,
Total_Victorias,
Total_Empates,
Total_Derrotas) |>
reactable(
theme = reactableTheme(backgroundColor = "#303030", color = "white",),
# Header
defaultColDef = colDef(
headerStyle = list(
backgroundColor = "#1E2A38",  # Header background color
color = "#E0E0E0",            # Softer white for text
fontWeight = "600",           # Semi-bold for modern style
borderBottom = "2px solid #FFFFFF", # Add bottom border
padding = "10px"              # Increase padding
)
),
columns = list(
# Otras Columnas
url = colDef(
name = "",
maxWidth = 40,
sortable = FALSE,
# render team logos from their image address
style = background_img(height = "90%", width = "90%")
),
Home_Team = colDef(
name = "Equipo"
),
Total_Partidos = colDef(
name = "PJ"
),
Total_Victorias = colDef(
name = "Victorias"
),
Total_Empates = colDef(
name = "Empates"
),
Total_Derrotas = colDef(
name = "Derrotas"
)
),
defaultSorted = list(Home_Team = "asc"),
defaultPageSize = 10
)
#| title: "Resumen Equipos"
filterExactMatch <- JS("(rows, columnId, filterValue) => {
return rows.filter(row => row.values[columnId] == filterValue)
}")
# Filtro por equipo en desuso
# ,columns = list(
#   Home_Team = colDef(
#     filterMethod = filterExactMatch
#   )
# ),
# elementId = "tbl"
# Filtro de equipo
match.join.lv2 |>
select(url,
Home_Team,
Total_Partidos,
Total_Victorias,
Total_Empates,
Total_Derrotas) |>
reactable(
theme = reactableTheme(backgroundColor = "#303030", color = "white",),
# Header
defaultColDef = colDef(
headerStyle = list(
color = "#E0E0E0",
fontWeight = "400"
borderBottom = "2px solid #FFFFFF",
